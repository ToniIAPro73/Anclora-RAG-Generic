{
  "meta": {
    "project": "Anclora RAG Generic",
    "date": "2025-10-17",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "Anclora RAG Generic is a Retrieval-Augmented Generation (RAG) system designed to centralize organizational knowledge by enabling document ingestion, indexing, and intelligent conversational querying with AI-generated responses. It supports multilingual interactions, secure access, and delivers accurate information grounded in source documents.",
  "core_goals": [
    "Centralize diverse document repositories into a unified searchable knowledge base",
    "Enable natural language conversations with AI-assisted answers tied to source references",
    "Support multilingual queries primarily in Spanish and English",
    "Ensure secure user authentication and role-based access control",
    "Provide an intuitive web interface for document upload, chat querying, and user configuration"
  ],
  "key_features": [
    "Robust document ingestion supporting PDF, DOCX, TXT, and Markdown with chunking and embedding",
    "High-performance semantic retrieval using Qdrant vector database and HuggingFace embeddings",
    "Conversational AI query interface powered by Ollama LLM with contextual and multilingual support",
    "Drag-and-drop frontend document upload with progress and success/error notifications",
    "Authentication with OAuth2/JWT and dev mode authentication bypass",
    "Configurable UI settings including themes, language, typography, and density",
    "Health check endpoint for service monitoring",
    "Batch document processing capabilities planned for asynchronous ingestion"
  ],
  "user_flow_summary": [
    "User uploads documents via drag-and-drop interface on the frontend, which triggers multipart POST requests to the /ingest endpoint.",
    "Backend parses and chunks documents, generates embeddings, and stores vectors in Qdrant with success feedback including chunk counts.",
    "User enters natural language queries in the chat interface; frontend sends POST requests to /query with the question.",
    "Backend retrieves relevant document chunks from Qdrant, uses Ollama LLM to generate AI responses with citations, and returns results.",
    "User views AI-generated answers with source metadata displayed in chat along with query history.",
    "Users can customize UI preferences such as theme and language in the settings page, persisted locally.",
    "Operators can monitor system health via the /health API endpoint."
  ],
  "validation_criteria": [
    "Document uploads accept supported file types and return accurate chunk counts upon successful ingestion.",
    "Queries return AI-generated answers consistent with indexed document content including proper source citations.",
    "Authentication protects API endpoints; dev bypass mode functions correctly without compromising security in production.",
    "Frontend upload and chat interfaces handle user inputs, display progress, loading states, and feedback correctly.",
    "System supports multilingual queries with correct response language matching user input.",
    "Health check endpoint reliably returns service status and version information.",
    "Batch ingestion framework exists and adheres to planned async processing requirements when implemented."
  ],
  "code_summary": {
    "tech_stack": [
      "Python 3.11",
      "FastAPI",
      "PostgreSQL",
      "Qdrant",
      "Redis",
      "Ollama",
      "LlamaIndex",
      "HuggingFace",
      "Next.js 15",
      "TypeScript",
      "React"
    ],
    "features": [
      {
        "name": "Health Check",
        "description": "Health check endpoint",
        "files": [
          "apps/api/routes/health.py"
        ]
      },
      {
        "name": "Document Ingestion",
        "description": "Upload documents for RAG",
        "files": [
          "apps/api/routes/ingest.py",
          "apps/api/workers/ingestion_worker.py"
        ]
      },
      {
        "name": "Document Query",
        "description": "Query documents with LLM",
        "files": [
          "apps/api/routes/query.py"
        ]
      },
      {
        "name": "Authentication",
        "description": "User authentication",
        "files": [
          "apps/api/routes/auth.py"
        ]
      }
    ]
  }
}
