<#
.SYNOPSIS
    A√±ade einops a requirements.txt y rebuild
#>

$ErrorActionPreference = "Stop"
Write-Host "`nüîß A√±adiendo dependencia einops..." -ForegroundColor Cyan

$repoRoot = $PSScriptRoot
$requirementsPath = Join-Path $repoRoot "apps\api\requirements.txt"

# Verificar si ya existe
$content = Get-Content $requirementsPath -Raw

if ($content -match 'einops') {
    Write-Host "‚úÖ einops ya existe en requirements.txt" -ForegroundColor Green
} else {
    Write-Host "üì¶ A√±adiendo einops..." -ForegroundColor Yellow
    Add-Content -Path $requirementsPath -Value "einops==0.8.0"
    Write-Host "‚úÖ einops a√±adido" -ForegroundColor Green
}

# Mostrar secci√≥n de modelos gratuitos
Write-Host "`nüìÑ Dependencias de modelos de embedding:" -ForegroundColor Cyan
Get-Content $requirementsPath | Select-String -Pattern "# Modelos de embedding|llama-index-embeddings|sentence-transformers|torch|einops" -Context 0,0 | ForEach-Object {
    Write-Host "   $_" -ForegroundColor DarkGray
}

Write-Host "`nüöÄ Ejecutando rebuild autom√°tico..." -ForegroundColor Yellow
Start-Sleep -Seconds 2

# Ejecutar rebuild
$infraDir = Join-Path $repoRoot "infra\docker"
Push-Location $infraDir

try {
    Write-Host "`n1Ô∏è‚É£ Deteniendo contenedores..." -ForegroundColor Yellow
    docker compose -f docker-compose.dev.yml down 2>$null
    
    Write-Host "`n2Ô∏è‚É£ Reconstruyendo API..." -ForegroundColor Yellow
    docker compose -f docker-compose.dev.yml build --no-cache api
    
    if ($LASTEXITCODE -ne 0) {
        throw "Error en el build"
    }
    
    Write-Host "`n3Ô∏è‚É£ Iniciando stack..." -ForegroundColor Yellow
    docker compose -f docker-compose.dev.yml up -d
    
    Write-Host "`n4Ô∏è‚É£ Esperando inicializaci√≥n (30s)..." -ForegroundColor Yellow
    Start-Sleep -Seconds 30
    
    Write-Host "`nüìã √öltimos logs:" -ForegroundColor Cyan
    docker compose -f docker-compose.dev.yml logs --tail=15 api
    
    Write-Host "`nüîç Test de salud..." -ForegroundColor Cyan
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8030/health" -UseBasicParsing -TimeoutSec 5
        Write-Host "`n‚úÖ API funcionando correctamente" -ForegroundColor Green
        Write-Host "   $($response.Content)" -ForegroundColor DarkGray
        
        Write-Host "`nüì° Endpoints disponibles:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Health:  http://localhost:8030/health" -ForegroundColor DarkGray
        Write-Host "   ‚Ä¢ Docs:    http://localhost:8030/docs" -ForegroundColor DarkGray
        Write-Host "   ‚Ä¢ Ingest:  POST http://localhost:8030/ingest" -ForegroundColor DarkGray
        
    } catch {
        Write-Host "`n‚ö†Ô∏è  Health check fall√≥ despu√©s de 30s" -ForegroundColor Yellow
        Write-Host "Mostrando m√°s logs..." -ForegroundColor DarkGray
        docker compose -f docker-compose.dev.yml logs --tail=50 api
        Write-Host "`nüí° El modelo puede tardar m√°s en cargar. Espera 1-2 min y prueba:" -ForegroundColor Cyan
        Write-Host "   curl http://localhost:8030/health" -ForegroundColor DarkGray
    }
    
} catch {
    Write-Host "`n‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    docker compose -f docker-compose.dev.yml logs api
    exit 1
} finally {
    Pop-Location
}